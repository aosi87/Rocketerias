/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package view;

import controller.ViewController;
import java.awt.Toolkit;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;
import java.util.Vector;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import model.CustomTableModel;

/**
 *
 * @author Isaac Alcocer <aosi87@gmail.com>
 */
public class TableView extends javax.swing.JFrame {
    
    private boolean bot1;
    private String path;
    private int colIndex[] = new int[15];
    /**
     * Creates new form TableView
     */
    public TableView() {
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("resources/gfx/icon.png"));
    }
    
    public TableView(String path) {
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("resources/gfx/icon.png"));
        //this.jTabbedPane1.setTitleAt(0, path);
        this.path = path;
        this.setLocationRelativeTo(null);
        this.jPanelManejoTabla.setBorder(null);
        this.jTable1.setRowSelectionAllowed(true);
        this.jTable1.setRowSelectionInterval(0, 0);
        this.bot1 = true;
        this.jTabbedPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder (),
                                                            path,
                                                            TitledBorder.CENTER,
                                                            TitledBorder.TOP));
        this.jPanelManejoDatos.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder (),
                                                            "Manejo de Datos",
                                                            TitledBorder.CENTER,
                                                            TitledBorder.TOP));
        this.jPanelManejoTabla.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder (),
                                                            "Manejo de Tabla",
                                                            TitledBorder.CENTER,
                                                            TitledBorder.TOP)); 
    }
    
    
    void setSheetName(String s) {
        this.jTabbedPane1.setTitleAt(0, s);
    }
    
    public void setTableModel(DefaultTableModel model){
        this.jTable1.setModel(model);
        //this.jTable1.setValueAt(true, 0, 0);
        for(int i = 0;  i < this.jTable1.getColumnCount(); i++)
            this.jTable1.getColumnModel().getColumn(i).setMinWidth(100);
        this.repaint();
    }
    
    private boolean isARowSelected() {
        for (int i=0; i< this.jTable1.getRowCount(); i++)
            if(this.jTable1.isRowSelected(i))
                return true;
        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelManejoTabla = new javax.swing.JPanel();
        jButtonFilas = new javax.swing.JButton();
        jButtonCabeceras = new javax.swing.JButton();
        jPanelManejoDatos = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButtonSeleccionColumn = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuOpen = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Software Mineria");
        setMaximumSize(new java.awt.Dimension(1080, 720));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("TableView"); // NOI18N

        jTabbedPane1.setMaximumSize(new java.awt.Dimension(87, 37));
        jTabbedPane1.setMinimumSize(new java.awt.Dimension(87, 37));
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(87, 37));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setAutoscrolls(false);
        jTable1.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jTabbedPane1.addTab("Archivo", jScrollPane1);

        jPanelManejoTabla.setLayout(new java.awt.GridLayout(1, 0));

        jButtonFilas.setText("<html><center>Selección<br>por Fila</center></html>");
        jButtonFilas.setMaximumSize(new java.awt.Dimension(87, 37));
        jButtonFilas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFilasActionPerformed(evt);
            }
        });
        jPanelManejoTabla.add(jButtonFilas);

        jButtonCabeceras.setText("<html>Seleccionar <br>Cabeceras</html>");
        jButtonCabeceras.setMaximumSize(new java.awt.Dimension(87, 37));
        jButtonCabeceras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCabecerasActionPerformed(evt);
            }
        });
        jPanelManejoTabla.add(jButtonCabeceras);

        jPanelManejoDatos.setLayout(new java.awt.GridLayout(1, 0));

        jButton1.setText("<html><center>Borrar<br>Selección</center></html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanelManejoDatos.add(jButton1);

        jButtonSeleccionColumn.setText("<html><center>Escoger<br>Columnas</center></html>");
        jButtonSeleccionColumn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeleccionColumnActionPerformed(evt);
            }
        });
        jPanelManejoDatos.add(jButtonSeleccionColumn);

        jButton7.setText("<html><center>Adjuntar<br>Datos</center></html>");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanelManejoDatos.add(jButton7);

        jMenu1.setText("Archivo");

        jMenuOpen.setText("Abrir");
        jMenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuOpenActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuOpen);
        jMenu1.add(jSeparator1);

        jMenuItemExit.setText("Salir");
        jMenuItemExit.setToolTipText("Al seleccionar esta opcion el programa terminara todo proceso ejecutado por este programa,\nse perdera toda operacion no salvada con aterioridad y el programa finalizara y cerrara todas\nlas instancias del mismo.");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ayuda");

        jMenuItem1.setText("Acerca de");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelManejoTabla, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 294, Short.MAX_VALUE)
                        .addComponent(jPanelManejoDatos, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelManejoTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelManejoDatos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuOpenActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        //Agregamos un filtro de extensiones
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("MS-Word", "docx","doc"));
        fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("Adobe-PDF", "pdf"));
        fileChooser.setFileFilter(new FileNameExtensionFilter("MS-Excel", "xlsx","xls"));
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        
        int returnValue = fileChooser.showDialog(this,"Seleccionar documento");
        if(fileChooser.getSelectedFile() != null){
            ViewController.setPDFCSVExcel(fileChooser.getSelectedFile().getName());
        
        if(ViewController.isPDF){
            ViewController.createCSV(fileChooser.getSelectedFile().getAbsolutePath());
            this.dispose();
        }
        
        if(ViewController.isCSV){
            TableView tv = new TableView(fileChooser.getSelectedFile().getAbsolutePath());
            tv.setSheetName(fileChooser.getSelectedFile().getName());
                try {
                    tv.setTableModel(ViewController.populateTableCSV(fileChooser.getSelectedFile().getAbsolutePath()));
                } catch (FileNotFoundException ex) {
                    //Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                }
             tv.setVisible(true);
             this.dispose();
        }
            
        if(ViewController.isExcel){
        switch(returnValue){
            case JFileChooser.APPROVE_OPTION:
                //File selectedFile = fileChooser.getSelectedFile();
                //System.out.println(fileChooser.getSelectedFile().getName());
                ViewController vc = null;
                try {
                    vc = new ViewController(fileChooser.getSelectedFile());
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this,
                                            "Ocurrio un error al obtener el Archivo.",
                                            "ERROR",
                                            JOptionPane.ERROR_MESSAGE);
                    break;
                    //this.jButtonCargarActionPerformed(evt);
                    //Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
                } catch (OutOfMemoryError oome) {
                    JOptionPane.showMessageDialog(this,
                                            "El archivo es demasiado greande para leerlo"
                                          + "\ncon menos de 2Gigs de memoria utilizable."
                                          + "\nSe recomienda dividir el archivo en archivos\n"
                                          + "mas pequeños para su manejo optimo.",
                                            "ERROR",
                                            JOptionPane.ERROR_MESSAGE);
                    break;
                }
                TableView tv = new TableView(fileChooser.getSelectedFile().getName());
                Object[] opc;
                String s = null;
                
                //System.err.println("num: " + vc.getNumSheet());
                 s = vc.getNameSheet(0);
                if(s != null){
                int index = 0;
                if( vc.getNumSheet() > 1){
                    opc = new Object[vc.getNumSheet()];
                    for(int i = 0; i < vc.getNumSheet();i++)
                        opc[i]=vc.getNameSheet(i);
                    s = (String)JOptionPane.showInputDialog(this,
                                            "Seleccione la Hoja de Calculo:\n",
                                            "Se encontraron varias Hojas.",
                                            JOptionPane.QUESTION_MESSAGE,
                                            null,opc,null);
                    if(s == null)
                        break;//s = vc.getNameSheet(0);
                    for(int i = 0; i < vc.getNumSheet(); i++)
                        if(s.equalsIgnoreCase(opc[i].toString()))
                            index = i;
                }
                tv.setSheetName(s);
                tv.setTableModel(vc.fillTableVector(index));
                tv.setVisible(true);
                this.dispose(); 
                }
                break;
            case JFileChooser.CANCEL_OPTION:
                //System.err.println("CancelOption");
                break;
            case JFileChooser.ERROR_OPTION:
                JOptionPane.showMessageDialog(this,
                                            "No fue posible obtener el archivo."
                                          + "\nVerifique que el archivo no este siendo usado por\n"
                                          + "otra persona/programa, este en vista protegida y/ó\n"
                                          + "cambiado de directorio/nombre.",
                                            "ERROR",
                                            JOptionPane.ERROR_MESSAGE);
                //System.err.println("ErrorDesconocido");
                break;
            default:
                //System.err.println("Ocurrio un problema"+fileChooser.toString());
                break;
             } 
            }
        }
    }//GEN-LAST:event_jMenuOpenActionPerformed

    private void jButtonCabecerasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCabecerasActionPerformed
        // TODO add your handling code here:
        int index = this.jTable1.getSelectedRow();
        Vector names = new Vector();
        if(this.jTable1.getRowSelectionAllowed() && this.isARowSelected()){
        for(int i = 0 ; i < this.jTable1.getColumnCount(); i++)
            //jTable1.getColumnModel().getColumn(i).setHeaderValue(this.jTable1.getValueAt(index, i).toString());
            names.add(this.jTable1.getValueAt(index, i).toString());
            ((CustomTableModel)this.jTable1.getModel()).setColumnIdentifiers(names);
            this.repaint();
//         if(jTable1.isRowSelected(i)){
//            jTable1.getColumnModel().getColumn(i).setHeaderValue(this.jTable1.getValueAt(index, i).toString());
//            this.repaint();
//         } else{ JOptionPane.showMessageDialog(this,
//                "Favor de seleccionar una fila\n Si la seleccion es multiple,\nse tomara la primera fila seleccionada.",
//                "No se encontraron filas seleccionadas.",
//                JOptionPane.ERROR_MESSAGE); break;}
        } else JOptionPane.showMessageDialog(this,
                "Esta opción funciona con la selección de al menos una fila\n"
                        + "\"Seleccion por Fila\" debe estar activado para realizar esta acción.",
                "No se encontro fila para selección.",
                JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_jButtonCabecerasActionPerformed

    private void jButtonFilasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFilasActionPerformed
        // TODO add your handling code here:
        if(this.bot1 == true){   
        this.jTable1.setColumnSelectionAllowed(true);
        this.jTable1.setRowSelectionAllowed(false);
        this.jButtonFilas.setText("<html><center>Selección<br>por Columna</center></html>");
        this.setTitle("Software Mineria- Seleccionando por Columna");
        this.bot1 = false;
        } else { 
            this.jTable1.setColumnSelectionAllowed(false);
            this.jTable1.setRowSelectionAllowed(true);
            this.jButtonFilas.setText("<html><center>Selección<br>por Fila</center></html>");
            this.bot1 = true;
        this.setTitle("Software Mineria- Seleccionando por Fila");    
        }
    }//GEN-LAST:event_jButtonFilasActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int[] indices = null;
        if(this.jTable1.getRowSelectionAllowed()){
            indices = this.jTable1.getSelectedRows();
            Arrays.sort(indices);
            for (int i = indices.length - 1; i >= 0; i--){
                ((CustomTableModel)this.jTable1.getModel()).removeRow(indices[i]);
                ((CustomTableModel)this.jTable1.getModel()).fireTableRowsDeleted(indices[i],indices[i]);
            }
        } else {
            indices = this.jTable1.getSelectedColumns();
            Arrays.sort(indices);
            //for (int i = indices.length - 1; i >= 0; i--) 
            //((CustomTableModel)this.jTable1.getModel()).setColumnCount(this.jTable1.getColumnCount()-1);
            //this.jTable1.setModel(ViewController.deleteColumn(this.jTable1,indices));
            ViewController.deleteColumn(jTable1, indices);
            //this.repaint();
        }
        //fireTableRowsDeleted(indices[i], indices[i]);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            // TODO add your handling code here:
            ViewController.saveData(0,this.jTable1);
            JOptionPane.showMessageDialog(this,
                "Datos guardados satisfactoriamente",
                "Guardado completo",
                JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                                            "No fue posible guardar el archivo.\n"
                                          + "Verifique si el archivo no este siendo\n"
                                          + "usado por otra persona u otro programa.",
                                            "ERROR",
                                            JOptionPane.ERROR_MESSAGE);
            //Logger.getLogger(TableView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButtonSeleccionColumnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeleccionColumnActionPerformed
        // TODO add your handling code here:
        
        CheckColumns cc = new CheckColumns();
        cc.setVisible(true);
        colIndex = cc.getIndexes();
        /*Object[] possibilities = {"ham", "spam", "yam"};
        String s = (String)JOptionPane.showInputDialog(
                    this,
                    "Seleccione la Hoja de Calculo:\n",
                    "Se encontraron varias Hojas.",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    possibilities,
                    null);
         */
        //System.out.println(s);
    }//GEN-LAST:event_jButtonSeleccionColumnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this,
                "NO FUE PENAAAL!!!!!",
                "NOOOOOOO",
                JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButtonCabeceras;
    private javax.swing.JButton jButtonFilas;
    private javax.swing.JButton jButtonSeleccionColumn;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuOpen;
    private javax.swing.JPanel jPanelManejoDatos;
    private javax.swing.JPanel jPanelManejoTabla;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
